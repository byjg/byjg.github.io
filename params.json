{"name":"XMLNuke","tagline":"A PHP Framework focused on your content","body":"XMLNuke\r\n=======\r\n\r\n[![Build Status](https://travis-ci.org/byjg/xmlnuke.png?branch=master)](https://travis-ci.org/byjg/xmlnuke)\r\n\r\n**[ *The master branch requires PHP53 or higher and is full PSR-0 compliant by using namespaces. The branch 'php50' is the legacy XMLNuke version and is now deprecated.* ]**\r\n\r\n\r\nXMLNuke is a Web Development Framework focused on the Data. Programming in XMLNuke you'll never more worry about open and close PHP tags and manage *spaghetti code*. All of your code is fully based in objects and all code produces only data in XML or JSON, you choose. \r\n\r\nThis is a page in XMLNuke:\r\n\r\n```php\r\nnamespace MyProject\\Modules;\r\n\r\nuse Xmlnuke\\Core\\Classes\\XmlnukeDocument;\r\nuse Xmlnuke\\Core\\Module\\BaseModule;\r\n\r\nclass Home extends BaseModule \r\n{\r\n    public function __construct()\r\n    {}\r\n\r\n    public function CreatePage() \r\n    {\r\n        $this->defaultXmlnukeDocument = new XmlnukeDocument(\"Title\", \"Abstract\");\r\n        ...\r\n        return $this->defaultXmlnukeDocument;\r\n    }\r\n}\r\n```\r\n\r\n\r\nYou can easily add some requirements to your page without have to care about how handle this. For example, you can define that your page requires authentication, will be cached or requires to be executed in a SSL context. See the example below:\r\n\r\n```php\r\nnamespace MyProject\\Modules;\r\n\r\nuse Xmlnuke\\Core\\Module\\BaseModule;\r\n\r\nclass Home extends BaseModule \r\n{\r\n    /**\r\n     * requiresAutentication(), getAccessLevel() and getRole() handle the page security and access level\r\n     */\r\n    public functon requiresAutentication()\r\n    {\r\n        return true;\r\n    }\r\n        \r\n    public function getAccessLevel()\r\n    {\r\n        return \\Xmlnuke\\Core\\Enum\\AccessLevel::OnlyRole;\r\n    }\r\n    \r\n    public function getRole()\r\n    {\r\n        return new array(\"DIRECTOR\", \"MANAGER\");\r\n    }\r\n        \r\n    \r\n    /**\r\n     * useCache determines if the XMLNuke will store your page in a cache or not.\r\n     * By default XMLNuke can store in the:\r\n     *   - \\Xmlnuke\\Core\\Cache\\ArrayCacheEngine (Static Array), \r\n     *   - \\Xmlnuke\\Core\\Cache\\FileSystemCacheEngine (File System), \r\n     *   - \\Xmlnuke\\Core\\Cache\\MemcachedEngine (MemCached),\r\n     *   - \\Xmlnuke\\Core\\Cache\\NoCacheEngine (Ignore Cache)\r\n     * \r\n     * You can configure your own cache strategy by implementing the interface \r\n     * \\Xmlnuke\\Core\\Cache\\ICacheEngine.\r\n     */ \r\n    public function useCache()\r\n    {\r\n        if ($this->_action != \"\")\r\n        {\r\n              return false;\r\n        }\r\n        else\r\n        {\r\n              return true;\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Determines if your page requires SSL or Not\r\n     */\r\n    public function requiresSSL()\r\n    {\r\n        return \\Xmlnuke\\Core\\Enum\\SSLAccess::ForceSSL;\r\n    }\r\n}\r\n```\r\n\r\nIf you work with models using the classic getter and setter or property you can add it to your page and the XMLNuke will output. For example:\r\n\r\n```php\r\nnamespace MyProject\\Classes;\r\n\r\nclass MyClass\r\n{\r\n    protected $_name;\r\n    public function getName() ...;\r\n    public function setName($value) ...;\r\n        \r\n    protected $_age;\r\n    public function getAge() ...;\r\n    public function setAge($value) ...;\r\n}\r\n```\r\n\r\n```php\r\nnamespace MyProject\\Modules;\r\n\r\nuse MyProject\\Classes;\r\nuse Xmlnuke\\Core\\Classes\\XmlnukeDocument;\r\nuse Xmlnuke\\Core\\Module\\BaseModule;\r\n\r\nclass Home extends BaseModule \r\n{\r\n    public function CreatePage() \r\n    {\r\n        $this->defaultXmlnukeDocument = new XmlnukeDocument(\"Title\", \"Abstract\");\r\n        ...\r\n        \r\n        $myClass = new MyClass();\r\n        $myClass->setName('Joao');\r\n        $myClass->setAge(39);\r\n        ...\r\n        $this->defaultXmlnukeDocument->addXmlnukeObject($myClass);\r\n            \r\n        return $this->defaultXmlnukeDocument;\r\n    }\r\n}\r\n```\r\n\r\nAfter that you can associate a Snippet XSL to handle this data and produces HTML or whatever you want to produce by the XSL transformation. You can optionally get the raw data in XML or JSON by calling through your web browser:\r\n\r\n```url\r\nhttp://youserver/xmlnuke.php?module=byjg.home&raw=xml&spath=//MyProject_Classes_MyClass\r\n```\r\n    \r\n```xml\r\n<xmlnuke xpath=\"//MyProject_Classes_MyClass\">\r\n    <MyProject_Classes_MyClass>\r\n        <name>Joao</name>\r\n        <age>39</age>\r\n    </MyProject_Classes_MyClass>\r\n</xmlnuke>\r\n```\r\n    \r\nor\r\n\r\n```url\r\nhttp://yourserver/xmlnuke.php?module=byjg.home&raw=json&xpath=//MyProject_Classes_MyClass;\r\n```\r\n\r\n```json\r\n{\r\n    \"MyProject_Classes_MyClass\": {\r\n        \"name\": \"Joao\",\r\n        \"age\": \"39\"\r\n    }\r\n}\r\n```\r\n\r\nSee the [Wiki](https://github.com/byjg/xmlnuke/wiki) for more examples;\r\n\r\n\r\n## Installing\r\n\r\nThe master branch requires PHP 5.3 to run. Prior PHP versions can use the legacy 'php50' branch. \r\n\r\n### Web Install\r\n\r\nYou can install the XMLNuke by using the XMLNuke PHP5 Installer. It is a interactive interface and will guide you during all install process. This tool check if your system meets the XMLNuke requirements, download the XMLNuke and creates a project for you. *It is in beta stage*\r\n\r\nSee more at:   \r\nhttps://github.com/byjg/xmlnuke-php5-installer\r\n\r\n\r\n\r\n### Command Line (Debian/Ubuntu)\r\n\r\nYou have to install your web server (Apache2, Lighttd, nginx, ...). XMLNuke requires for PHP:\r\n\r\n    apt-get install php5-xsl php5-json\r\n    \r\nDownload the XMLNuke package. You can download from:\r\n- the Zip package (https://github.com/byjg/xmlnuke/archive/master.zip) or \r\n- from repository by using the Git or SVN. \r\n\r\nExtract the package in any folder, e.g. /opt/xmlnuke.   \r\n**Remember**: The XMLNuke folder cannot to be accessible from you Web Browser. \r\n\r\nRun at your terminal:\r\n\r\n    cd /opt/xmlnuke\r\n    ./copy-dist-files.sh link yes\r\n\r\nChoose and create a folder for your project. This folder must be accessible through your web broswer. \r\n\r\n    mkdir /var/www/my-project\r\n    php /opt/xmlnuke/create-php5-project.php /var/www/my-project myproject en-us pt-br\r\n    ln -s /opt/xmlnuke/xmlnuke-common /var/www/my-project/common\r\n    \r\nNow, just test it:\r\n\r\n    http://yourserver/my-project\r\n    \r\n\r\n### Windows\r\n\r\nYou have to install your web server (Xampp, Apache2, IIS, ...) and configure it to run PHP5 scripts. Make sure that the XSL extension is installed. \r\n\r\nDownload the XMLNuke package. You can download from:\r\n- the Zip package (https://github.com/byjg/xmlnuke/archive/master.zip) or \r\n- from repository by using the Git or SVN. \r\n\r\nExtract the package in any folder, e.g. D:\\data\\xmlnuke.   \r\n**Remember**: The XMLNuke folder cannot to be accessible from you Web Browser. \r\n\r\nUsing the Windows Explorer find your XMLNuke folder and double click in the file \"copy-dist-files.vbs\". Follow the instructions. \r\n\r\nChoose and create a folder for your project (e.g. c:\\InetPub\\wwwroot\\my-project). This folder must be accessible through your web broswer. Using the Windows Explorer find your XMLNuke Folder and double click in the file \"create-php5-project.vbs\" and follow the instructions. \r\n\r\nNow, just test it:\r\n\r\n    http://yourserver/my-project\r\n    \r\n","google":"UA-874486-1","note":"Don't delete this file! It's used internally to help with page regeneration."}